{"mappings":"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","sources":["src/js/script.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', function () {\n  const BASE_URL = 'https://api.themoviedb.org/3';\n  const API_KEY = 'api_key=b5e824a3d922f68ba211fcf6dbdcb6f5';\n  const API_URL = BASE_URL + '/discover/movie?sort_by-popularity.desc&' + API_KEY;\n  const IMG_URL = 'https://image.tmdb.org/t/p/w500';\n  const searchURL = BASE_URL + '/search/movie?' + API_KEY;\n  const getGenres = BASE_URL + '/genre/movie/list' + API_KEY;\n\n\n  const options = {\n    params: {\n      key: API_KEY,\n      query: '',\n      include_adult: false,\n      language: 'en-US',\n      primary_release_year: '',\n      page: 1,\n      region: '',\n      year: '',\n    },\n  };\n\n  //localStorage\n  let currentMovieTitle, currentMovieID, queue, watched;\n  JSON.parse(localStorage.getItem(\"movie-queue\")) === null ? queue = [] : queue = JSON.parse(localStorage.getItem(\"movie-queue\"));\n  localStorage.setItem(\"movie-queue\", JSON.stringify(queue));\n\n  JSON.parse(localStorage.getItem(\"movie-watched\")) === null ? watched = [] : watched = JSON.parse(localStorage.getItem(\"movie-watched\"));\n  localStorage.setItem(\"movie-watched\", JSON.stringify(watched));\n\n\n  // MODAL SECTION\n  const modal = document.getElementById('myModal');\n  const modalPoster = document.getElementById('modal-poster');\n  const modalTitle = document.getElementById('modal-title');\n  const modalVote = document.getElementById('modal-vote');\n  const modalPopularity = document.getElementById('modal-popularity');\n  const modalOrigTitle = document.getElementById('modal-original-title');\n  const modalGenre = document.getElementById('modal-genre');\n  const modalOverview = document.getElementById('modal-overview');\n  const addToWatchedBtn = document.getElementById('addToWatchedBtn');\n  const addToQueuBtn = document.getElementById('addToQueuBtn');\n  const closeBtn = document.getElementsByClassName('close')[0];\n\n  // function to open the modal with movie details\n  function openModal(movie) {\n\n    modalPoster.src = `https://image.tmdb.org/t/p/w500/${movie.poster_path}`;\n    modalTitle.textContent = movie.title.toUpperCase();\n    modalVote.textContent =\n      movie.vote_average.toFixed(1) + '   /   ' + movie.vote_count;\n    modalPopularity.textContent = movie.popularity.toFixed(1);\n    modalOrigTitle.textContent = movie.original_title.toUpperCase();\n    modalGenre.textContent = movie.genre;\n    modalOverview.textContent = movie.overview;\n    modal.style.display = 'block';\n\n    modalPoster.src = `https://image.tmdb.org/t/p/w500/${movie.poster_path}`;\n    modalTitle.textContent = movie.title;\n    modalVote.textContent = movie.vote_average + '/' + movie.vote_count;\n    modalPopularity.textContent = movie.popularity;\n    modalOrigTitle.textContent = movie.original_title;\n    modalGenre.textContent = movie.genre_ids;\n    modalOverview.textContent = movie.overview;\n    modal.style.display = \"block\";\n    currentMovieID = movie.id;\n    currentMovieTitle = movie.original_title;\n\n  }\n\n  // function to close the modal\n  function closeModal() {\n    modal.style.display = 'none';\n  }\n\n  // event listener for the close button\n  closeBtn.addEventListener('click', closeModal);\n\n  // event listener for clicks outside the modal\n  window.addEventListener('click', function (event) {\n    if (event.target === modal) {\n      closeModal();\n    }\n  });\n\n  const main = document.getElementById('main');\n  const form = document.getElementById('search-form');\n  const search = document.getElementById('search-input');\n  const galleryEl = document.getElementById('gallery');\n  const loader = document.querySelector('.loader-container');\n\n  // PAGINATION\n\n  getMovies(API_URL);\n\n  // DISPLAY MOVIE CARDS\n  function getMovies(url) {\n    lastUrl = url;\n  \n    main.classList.toggle('is-hidden');\n    loader.classList.toggle('is-hidden');\n\n    fetch(url)\n      .then(res => res.json())\n      .then(data => {\n        console.log(data.results);\n        if (data.results.length !== 0) {\n          showMovies(data.results);\n          currentPage = data.page;\n          nextPage = currentPage + 1;\n          prevPage = currentPage - 1;\n          totalPages = data.total_pages;\n          main.classList.toggle('is-hidden');\n          loader.classList.toggle('is-hidden');\n\n          current.innerText = currentPage;\n          if (currentPage <= 1) {\n            prev.classList.add('disabled');\n            next.classList.remove('disabled');\n          } else if (currentPage >= totalPages) {\n            prev.classList.remove('disabled');\n            next.classList.add('disabled');\n          } else {\n            prev.classList.remove('disabled');\n            next.classList.remove('disabled');\n          }\n        } else {\n          main.classList.toggle('is-hidden');\n          loader.classList.toggle('is-hidden');\n          main.innerHTML = `<h1 class=\"no-results\">No Results Found</h1>`;\n        }\n      });\n  }\n\n  function showMovies(data) {\n    main.innerHTML = '';\n\n    data.forEach(movie => {\n      const { title, poster_path, release_date, genre_ids } = movie;\n      const movieEl = document.createElement('div');\n      movieEl.classList.add('movie');\n      movieEl.innerHTML = `\n            <img src=\"${poster_path\n          ? IMG_URL + poster_path\n          : 'http:/>/via.placeholder.com/1080x1500'\n        }\"\n                alt=\"${title}\"/>\n            \n            <div class=\"movie-info\">\n                <h3>${title.toUpperCase()}</h3>\n                <div class=\"movie-details\">\n                    <span id=\"genre\" class=\"${genre_ids}\">${genre_ids}</span> |\n                    <span id=\"release_date\" class=\"${release_date}\">${release_date.slice(\n          0,\n          4\n        )}</span>\n                </div>\n            </div>        \n        `;\n      movieEl.addEventListener('click', function () {\n        openModal(movie);\n      });\n      main.appendChild(movieEl);\n    });\n  }\n\n  form.addEventListener('submit', e => {\n    e.preventDefault();\n\n    const searchTerm = search.value;\n\n    if (searchTerm) {\n      getMovies(searchURL + '&query=' + searchTerm);\n    } else {\n      getMovies(API_URL);\n    }\n  });\n\n  // function for previous page\n  prev.addEventListener('click', () => {\n    if (prevPage > 0) {\n      pageCall(prevPage);\n    }\n  });\n\n  // function for the next page\n  next.addEventListener('click', () => {\n    if (nextPage <= totalPages) {\n      pageCall(nextPage);\n    }\n  });\n\n  function pageCall(page) {\n    let urlSplit = lastUrl.split('?');\n    let queryParams = urlSplit[1].split('&');\n    let key = queryParams[queryParams.length - 1].split('=');\n    if (key[0] != 'page') {\n      let url = lastUrl + '&page=' + page;\n      getMovies(url);\n    } else {\n      key[1] = page.toString();\n      let a = key.join('=');\n      queryParams[queryParams.length - 1] = a;\n      let b = queryParams.join('&');\n      let url = urlSplit[0] + '?' + b;\n      getMovies(url);\n    }\n  }\n\n\n  //Clicking a movie\n  main.addEventListener('click', e => {\n    let currentMovie = e.target.parentElement;\n    currentMovieTitle = currentMovie.lastElementChild.firstElementChild.innerText;\n    console.log(currentMovieTitle);\n  });\n\n  //Add to Watched (localStorage)\n  addToWatchedBtn.addEventListener('click', () => {\n    watched.includes(currentMovieTitle)\n      ? alert(`${currentMovieTitle} has been watched already`)\n      : watched.push(currentMovieTitle);\n    localStorage.setItem('movie-watched', JSON.stringify(watched));\n  });\n\n  //Add to Queue (localStorage)\n  addToQueuBtn.addEventListener('click', () => {\n    queue.includes(currentMovieTitle)\n      ? alert(`${currentMovieTitle} has been added to the queue already`)\n      : queue.push(currentMovieTitle);\n    localStorage.setItem('movie-queue', JSON.stringify(queue));\n  });\n\n  //Add to Watched (localStorage)\n  addToWatchedBtn.addEventListener('click', () => {\n    watched.includes(currentMovieID) ?\n      alert(`${currentMovieTitle} has been watched already`) :\n      watched.push(currentMovieID);\n    localStorage.setItem('movie-watched', JSON.stringify(watched));\n  })\n\n  //Add to Queue (localStorage)\n  addToQueuBtn.addEventListener('click', () => {\n    queue.includes(currentMovieID) ?\n      alert(`${currentMovieTitle} has been added to the queue already`) :\n      queue.push(currentMovieID);\n    localStorage.setItem('movie-queue', JSON.stringify(queue));\n  })\n\n\n\n  //Pressing escape to close modal\n  document.body.addEventListener('keydown', event => {\n    if (event.code === 'Escape') {\n      closeModal();\n    }\n  });\n});\n"],"names":["document","addEventListener","BASE_URL","API_KEY","API_URL","IMG_URL","currentMovieTitle","currentMovieID","queue","watched","JSON","parse","localStorage","getItem","setItem","stringify","modal","getElementById","modalPoster","modalTitle","modalVote","modalPopularity","modalOrigTitle","modalGenre","modalOverview","addToWatchedBtn","addToQueuBtn","closeModal","style","display","getElementsByClassName","window","event","target","main","form","search","loader","querySelector","getMovies","url","lastUrl","classList","toggle","fetch","then","res","json","data","console","log","results","length","innerHTML","forEach","movie","title","poster_path","release_date","genre_ids","movieEl","createElement","add","toUpperCase","slice","src","textContent","vote_average","toFixed","vote_count","popularity","original_title","genre","overview","id","openModal","appendChild","showMovies","currentPage","page","nextPage","prevPage","totalPages","total_pages","current","innerText","prev","next","remove","pageCall","urlSplit","split","queryParams","key","toString","a","join","b","e","preventDefault","searchTerm","value","searchURL","currentMovie","parentElement","lastElementChild","firstElementChild","includes","alert","push","body","code"],"version":3,"file":"index.fbf89caf.js.map"}